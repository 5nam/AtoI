# -*- coding: utf-8 -*-
"""03-03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M16Yj68HeTS0CtG9qoJWtx8JUVqGLhHJ
"""

# 다중 회귀 multiple regression
import pandas as pd # pd는 관례적으로 사용하는 판다스의 별칭
df = pd.read_csv('https://bit.ly/perch_csv_data')
perch_full = df.to_numpy()
print(perch_full)

import numpy as np
perch_weight = np.array([5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0,
       115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0,
       150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0,
       218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0,
       556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0,
       850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0,
       1000.0])

from sklearn.model_selection import train_test_split
train_input, test_input, train_target, test_target = train_test_split(
    perch_full, perch_weight, random_state=42)

from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures()
poly.fit([[2,3]])
print(poly.transform([[2,3]]))

poly = PolynomialFeatures(include_bias=False)
poly.fit([[2,3]])
print(poly.transform([[2,3]]))

poly = PolynomialFeatures(include_bias=False)
poly.fit(train_input)
train_poly = poly.transform(train_input)
print(train_poly.shape)

poly.get_feature_names()

test_poly = poly.transform(test_input)

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(train_poly, train_target)
print(lr.score(train_poly, train_target))

print(lr.score(test_poly, test_target))

poly = PolynomialFeatures(degree=5, include_bias=False)
poly.fit(train_input)
train_poly = poly.transform(train_input)
test_poly = poly.transform(test_input)
print(train_poly.shape)

lr.fit(train_poly, train_target)
print(lr.score(train_poly, train_target))

print(lr.score(test_poly, test_target))

# 음수가 나오는 이유는 특성의 개수를 크게 늘림ㄴ 선형 모델은 아주 강력해짐
# 훈련 세트에 대해 거의 완벽하게 학습할 수 있음
# 하지만 이런 모델은 훈련 세트에 과대적합되므로 테스트 세트에서는 형편없는 점수를 만들게 됨.

# 규제 : 머신러닝 모델이 훈련 세트를 너무 과도하게 학습하지 못하도록 하는 것.
# 규제를 적용하기 전에 먼저 정규화@ 평균과 표준 편차를 직접 구해 특성을 표준점수로 바꾸지 않고, 제공되는 클래스 사용

from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
ss.fit(train_poly)
# 표준 점수로 변환한 train_scaled 와 test_scaled 가 준비되어 있음
train_scaled = ss.transform(train_poly)
test_scaled = ss.transform(test_poly)

# 선형회귀모델에 규제를 추가한 모델을 릿지(ridge) 와 라쏘(lasso)라고 부름
# 이 두 모델은 규제를 가하는 방법이 다름. 릿지는 계수를 제곱한 값을 기준으로 규제를 적용하고, 라쏘는 계수의 절댓값을 기준으로 규제를 적용
# 일반적으로 릿지를 조금 더 선호함.

# 릿지 회귀
from sklearn.linear_model import Ridge
ridge = Ridge()
ridge.fit(train_scaled, train_target)
print(ridge.score(train_scaled, train_target))

print(ridge.score(test_scaled, test_target))

# 위의 과정을 통해 테스트 세트 점수가 정상으로 돌아옴. 모델 객체를 만들 때 alpha 매개변수로 규제의 강도를 조절
# alpha 값이 크면 규제 강도가 세지므로 계수 값을 줄이고, 조금 더 과소 적합 되도록 유도
# alpha 값이 작으면 계수를 줄이는 역할이 줄어들고 선형회귀모델과 유사해지므로 과대적합될 가능성이 큽니다.
# 적절한 alpha 값을 찾는 방법은 alpha 값에 대한 R^2 그래프를 그려보는 것

import matplotlib.pyplot as plt
train_score = []
test_score = []

# alpha 값을 0.001 에서 100 까지 10배씩 늘려가며 릿지 회귀 모델을 훈련한 다음 훈련 세트와 테스트 세트 점수를 파이썬 리스트에 저장
alpha_list = [0.001, 0.01, 0.1, 1, 10, 100]
for alpha in alpha_list:
  # 릿지 모델을 만듭니다.
  ridge = Ridge(alpha=alpha)
  # 릿지 모델을 훈련합니다.
  ridge.fit(train_scaled, train_target)

  # 훈련 점수와 테스트 점수를 저장
  train_score.append(ridge.score(train_scaled, train_target))
  test_score.append(ridge.score(test_scaled, test_target))

# 그래프 그리기
plt.plot(np.log10(alpha_list), train_score)
plt.plot(np.log10(alpha_list), test_score)
plt.xlabel('alpha')
plt.ylabel('R^2')
plt.show() #  훈련세트에는 잘맞고, 테스트 세트에는 형편없는 과대적합의 전형적인 모습

# 위의 그래프에서 훈련세트와 가장 가깝고 테스트 세트의 점수가 가장 높은 alpha 값은 -1, 즉 10^-1 = 0.1임
# alpha 값을 0.1로 하여 최종 모델 훈련

ridge = Ridge(alpha=0.1)
ridge.fit(train_scaled, train_target)
print(ridge.score(train_scaled, train_target))
print(ridge.score(test_scaled, test_target))

# 라쏘 회귀
from sklearn.linear_model import Lasso
lasso = Lasso()
lasso.fit(train_scaled, train_target)
print(lasso.score(train_scaled, train_target))

# alpha 값을 바꾸어 가며 훈련 세트와 테스트 세트에 대한 점수 계산
train_score = []
test_score = []
alpha_list = [0.001,0.01,0.1,1,10,100]

for alpha in alpha_list:
  # 라쏘 모델을 만듦
  lasso = Lasso(alpha=alpha, max_iter=10000)
  # 라쏘 모델을 훈련
  lasso.fit(train_scaled, train_target)
  # 훈련 점수와 테스트 점수를 저장
  train_score.append(lasso.score(train_scaled, train_target))
  test_score.append(lasso.score(test_scaled, test_target))

plt.plot(np.log10(alpha_list), train_score)
plt.plot(np.log10(alpha_list), test_score)
plt.xlabel('alpha')
plt.ylabel('R^2')
plt.show()
# 이 그래프도 왼쪽은 과대적합, 오른쪽으로 갈수록 훈련세트와 테스트세트의 점수가 좁혀지고 있음.
# 이 그래프에서 최적의 alpha 값을 찾아보면 1, 즉 10^1 = 10 임.

lasso = Lasso(alpha=10)
lasso.fit(train_scaled, train_target)
print(lasso.score(train_scaled, train_target))
print(lasso.score(test_scaled, test_target))

print(np.sum(lasso.coef_==0))



