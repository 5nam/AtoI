# -*- coding: utf-8 -*-
"""2-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ogKvSKOhnl-Pj7idbn3JlbNP8IChqDeX
"""

# 데이터 전처리

fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8, 
                10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7, 
                7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

import numpy as np
np.column_stack(([1,2,3],[4,5,6]))

# fish_length와 fish_weight 합치기
fish_data = np.column_stack((fish_length, fish_weight))

# np.ones, np.zeros 함수와 np.concatenate 를 통해 정답 데이터 생성 
fish_target = np.concatenate((np.ones(35), np.zeros(14)))
print(fish_target)

# 이전에는 넘파이 배열의 인덱스를 직접 섞어서 훈련세트와 테스트세트로 나누었음 하지만 좀 번거로운 방식임
# train_test_split() 함수를 통해 섞어서 훈련, 테스트 세트를 나누어 줌

from sklearn.model_selection import train_test_split
train_input, test_input, train_target, test_target = train_test_split(fish_data, fish_target, random_state = 42)
# 잘 나누었느지 확인 : print(train_input.shape, test_input.shape)

print(test_target) # 잘 섞인 것 같지만 빙어의 비율이 조금 모자람. 샘플링 편향
# 이런 문제를 해결할 방법 : stratify 매개변수에 타깃 데이터를 전달하면 클래스 비율에 맞게 데이터를 나ㅜㅁ
train_input, test_input, train_target, test_target = train_test_split(fish_data, fish_target, stratify=fish_target, random_state = 42)
print(test_target)

from sklearn.neighbors import KNeighborsClassifier
kn = KNeighborsClassifier()
kn.fit(train_input, train_target)
kn.score(test_input, test_target)

print(kn.predict([[25, 150]])) # 도미가 아닌 빙어로 틀린 예측을 함

import matplotlib.pyplot as plt

plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(25,150,marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# 시각적으로 봤을 때도 이 샘플은 오른쪽 위로 뻗어 있는 다른 도미 데이터에 더 가까움. 근데 왜 방어 데이터에 가깝다고 판단?
# k-최근접 이웃은 주변의 샘플 중에서 다수인 클래스를 예측으로 사용함.
# 주어진 샘플에서 가장  가까운 이웃을 찾아주는 kneighbors()메서드를 활용하여 : 이 메서드는 이웃까지의 거리와 이웃 샘플의 인덱스를 반환, 이웃 개수인 n_neighbors의 기본값은 5이므로 5개 이웃이 반환됨

distances, indexes = kn.kneighbors([[25,150]])

plt.scatter(train_input[:,0],train_input[:,1])
plt.scatter(25,150, marker='^')
plt.scatter(train_input[indexes,0], train_input[indexes,1], marker='D')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# 직관적으로 보면 도미와 가깝게 보이는데, 왜 가까운 이웃을 빙어라고 생각한 걸까?
print(distances)

# 산점도를 천천히 보면, 삼각현 샘플에 가장 가까운 거리는 92이고, 그 외 가까운 샘플들은 모두 130, 138임.
# 근데 거리가 92, 130 이라고 했을때 그래프에 나타난 거리 비율이 이상함.
# 어림짐작으로 보아도 92 거리보다 몇 배는 되어 보이는데 겨우 거리가 130인게 이상함.
# 그 이유는 바로 x 축은 범위가 좁고(10~40), y축은 범위가 넓음(0~1000)
# 따라서 y 축으로 조금만 멀어져도 거리가 아주 큰 값으로 계산됨. 이 때문에 도미 샘플이 이웃으로 선택되지 못한 것.

# 이를 명확하게 확인하기 위해 x 축의 범위를 동일하게 0~1000 으로 맞추어 보겠음. (xlim, ylim 함수를 통해)
plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(25,150,marker='^')
plt.scatter(train_input[indexes,0], train_input[indexes,1],marker='D')
plt.xlim(0,1000)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# 산점도가 거의 일직선으로 나타남. 오로지 생선의 무게(Y축)만 고려 대상이 됨.
# 데이터를 표현하는 기준이 다르면 알고리즘이 올바르게 예측할 수 없음
# 알고리즘이 거리 기반일 때 더욱 그렇게 됨. (k-최근접 이웃 포함)
# 이런 알고리즘들은 샘플 간의 거리에 영향을 많이 받으므로 제대로 사용하려면 특성값을 일정한 기준으로 맞춰주어야 함.
# 이러한 작업을 데이터 전처리라고 함.

# 가장 널리 사용하는 전처리 방법 중 하나는 표전 점수임
# 표준 점수는 각 특성값이 0에서 표준편차의 몇 배만큼 떨어져 있는지를 나타냄. 이를 통해 실제 특성값의 크기와 상관없이 동일한 조건으로 비교할 수 있음.

mean = np.mean(train_input, axis=0) # 평균 계산
std = np.std(train_input, axis=0) # 표준 편차 계산

# train_input 은 (36,2) 크기의 배열. 특성마다 값의 스케일이 다르므로 평균과 표준편차는 각 특성별로 계싼해야 함.
# 이를 위해 axis = 0 으로 지정 : 이렇게 하면 행을 따라 각 열의 통계값을 계산하므로

print(mean, std)

# 넘파이는 train_input 의 모든 행에서 mean 에 있는 두 평균값을 빼줌. 그다음 std에 있는 두 표준편차를 다시 모든 행에 적용
# 이런 기능을 브로드캐스팅이라고 함. 책 p.102 가보면 설명 나와 있음
train_scaled = (train_input - mean)/std

# 전처리 데이터로 모델 훈련하기
plt.scatter(train_scaled[:,0],train_scaled[:,1])
plt.scatter(25, 150, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# 또 예상과 다르게 나옴. 그 이유는 훈련 세트를 평균으로 빼고 표준편차로 나누어 주었기 때문에 값의 범위가 크게 달라짐
# 샘플 [20, 150]을 동일한 비율로 변환하지 않으면 이런 현상 발생
# 여기에서 아주 중요한 점은 훈련 세트의 mean, std 를 이용해서 변환해야 한다는 점.
# 사실 샘플 하나만으로는 평균과 표준편차를 구할 수도 없음. 동일한 기준으로 샘플을 변환하고 산점도 그려보기

new = ([25,150] - mean) / std
plt.scatter(train_scaled[:,0],train_scaled[:,1])
plt.scatter(new[0], new[1], marker='^')
plt.xlabel('length')
plt.ylabel('wieght')
plt.show()

# 앞서 표준 편차로 변환하기 전의 산점도와 거의 동일.
# 크게 달라진 점은 x 축과 y 축의 범위가 -1.5 ~ 1.5 사이로 바뀌었다는 것.
# 훈련 데이터의 두 특성이 비슷한 범위를 차지하고 있음.

# k - 최근접 이웃 모델로 훈련
kn.fit(train_scaled, train_target)
# 훈련을 마치고 테스트 세트로 평가할 때 주의해야 함.
# 수상한 샘플을 훈련 세트의 평균과 표준편차로 변환해야지 같은 비율로 산점도를 그릴 수 있었던 것과 마찬가지로
# 테스트 세트도 훈련 세트의 평균과 표준편차로 변환해야 함.

# 테스트 세트의 스케일 변환
test_scaled = (test_input - mean)/std

kn.score(test_scaled, test_target)

# 평균과 표준편차로 변환한 수상한 샘플을 사용해 모델을 예측
print(kn.predict([new]))

# kneighbors() 함수로 이 샘플의 k-최근접 이웃을 구한 다음 산점도로 그려볼 것. 특성을 표준점수로 바꾸었기 때문에
# k-최근접 이웃 알고리즘이 올바르게 거리를 측정했을 것

distances, indexes = kn.kneighbors([new])
plt.scatter(train_scaled[:,0], train_scaled[:,1])
plt.scatter(new[0], new[1], marker='^')
plt.scatter(train_scaled[indexes, 0], train_scaled[indexes, 1], marker='D')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

